buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

// Plugins
plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
// apply plugin: 'maven-publish'

// Mod info --------------------------------------------------------------------

def mod_id = "endorutil"
group = "endorh.util"
version = "1.19-0.6.1"
def group_slashed = project.group.replaceAll("\\.", "/"),
    classname = "Endor Util",
    maven_artifact = "${group}:${mod_id}:${version}"

// Attributes
def display_name = "Endor Util",
    vendor = "Endor H",
    credits = "",
    authors = "Endor H",
    issue_tracker = "",
    page = "",
    update_json = "",
    logo_file = "${mod_id}.png",
    description = '''
Modding utilities I thought could be reused.
Still quite small, but feel free to use.
'''

// License
def license = "MIT"

// Dependencies
def mc_version = "1.19",
    forge = "41.0.38",
    forge_version = "${mc_version}-${forge}"

// Jar attributes
archivesBaseName = "${mod_id}-${mc_version}"

def jar_attributes = [
    "Specification-Title"     : "${mod_id}",
    "Specification-Vendor"    : "${vendor}",
    "Specification-Version"   : "1",
    "Implementation-Title"    : project.name,
    "Implementation-Version"  : "${version}",
    "Implementation-Vendor"   : "${vendor}",
    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
    "Maven-Artifact"          : "${maven_artifact}"
]

def mod_properties = [
    modid: mod_id,
    display: display_name,
    version: project.version,
    mcversion: mc_version,
    vendor: vendor,
    authors: authors,
    credits: credits,
    license: license,
    page: page,
    issue_tracker: issue_tracker,
    update_json: update_json,
    logo_file: logo_file,
    description: description,
    group: group,
    class_name: classname,
    group_slashed: group_slashed
]

// Java options -------------------------------------------------------------------

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

// Unicode support
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

java {
    withSourcesJar()
    // withJavadocJar()
}

// Minecraft options --------------------------------------------------------------

minecraft {
    mappings channel: 'official', version: '1.19'

    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Run configurations
    runs {
        client {
            workingDirectory project.file('run')

            // Allowed flags: SCAN, REGISTRIES, REGISTRYDUMP
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                // simpleconfig {
                //     //noinspection GroovyAssignabilityCheck
                //     source sourceSets.main
                // }
            }
        }

        server {
            //noinspection GroovyAssignabilityCheck
            workingDirectory project.file('run')

            // Allowed flags: SCAN, REGISTRIES, REGISTRYDUMP
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                // simpleconfig {
                //     //noinspection GroovyAssignabilityCheck
                //     source sourceSets.main
                // }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            // Allowed flags: SCAN, REGISTRIES, REGISTRYDUMP
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            // property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                // examplemod {
                //     source sourceSets.main
                // }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Project dependencies -----------------------------------------------------------

repositories {
    // maven {
    //     name = "Cloth Config API"
    //     url = "https://maven.shedaniel.me/"
    // }
    maven {
        url 'https://repo.maven.apache.org/maven2'
        name 'Maven Central'
    }
}

dependencies {
    // IDE
    implementation 'org.jetbrains:annotations:23.0.0'
    implementation 'org.junit.jupiter:junit-jupiter:5.8.2'

    // Minecraft
    minecraft "net.minecraftforge:forge:${forge_version}"

    // I shouldn't have learnt PCRE before other (useless) Regex implementations
    // Now I can't live without recursive patterns
    // https://github.com/florianingerl/com.florianingerl.util.regex
    implementation "com.github.florianingerl.util:regex:1.1.9"

    // Simple regex valid matches generator
    implementation "com.github.curious-odd-man:rgxgen:1.3"

}

// Tasks --------------------------------------------------------------------------

test {
    useJUnitPlatform()
}

classes.dependsOn extractNatives // Make sure the natives are extracted on compile

shadowJar {
    manifest {
        attributes(jar_attributes)
    }

    // Include only Cloth Config API in the shadow jar
    dependencies {
        //noinspection GroovyAssignabilityCheck
        include dependency("com.github.florianingerl.util:regex:1.1.9")
        include dependency("com.github.curious-odd-man:rgxgen:1.3")
    }

    // Relocate the root package
    relocate "com.florianingerl", "endorh.util.shadowed.com.florianingerl"
    relocate "com.github.curiousoddman", "endorh.util.shadowed.com.github.curiousoddman"

    classifier '' // Replace default jar

    // Preferred method to reobfuscate the jar file
    finalizedBy 'reobfJar'
}

reobf {
    shadowJar {}
}

// Jar attributes
jar {
    manifest {
        attributes(jar_attributes)
    }

    classifier 'clean'

    // Preferred method to reobfuscate the jar file
    finalizedBy 'reobfJar'
}

// task deobfJar(type: Jar, dependsOn: classes) {
//     archiveClassifier.set("deobf")
//     from sourceSets.main.output
//     manifest {
//         attributes(jar_attributes)
//         attributes 'Maven-Artifact': "${maven_artifact}:deobf"
//     }
// }

artifacts {
    archives shadowJar
    // archives deobfJar
}

// Process resources
processResources {
    inputs.properties mod_properties
    duplicatesStrategy(DuplicatesStrategy.WARN)

    from(sourceSets.main.resources.srcDirs) {
        filesMatching(["**/*.toml", "**/*.mcmeta"]) {
            expand mod_properties
        }
        filesMatching("**/*.json") {
            if (!getPath().contains("/lang/"))
                expand mod_properties
        }
    }
}

// Publishing
publishing {
    publications {
        mod(MavenPublication) {
            // artifact jar
            artifact shadowJar
            artifact sourcesJar
            // artifact javadocJar
            // artifact deobfJar

            pom {
                name = display_name
                url = page
                properties = [
                    description: description
                ]
            }
        }
    }
    repositories {
        maven {
            name "LocalMods"
            url "${project.projectDir.parentFile.toURI()}maven"
        }
    }
    println "${project.projectDir.parentFile.toURI()}maven"
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}